\import lect07
\open Nat

-- 1. Реализуйте любой алгоритм сортировки, используя with для паттерн матчинга на результате сравнения элементов списка.

\func compare (x y : Nat) : Bool => x < y


\func len {A : \Type} (xs : List A) : Nat \elim xs
    | nil => 0
    | cons x xs => suc (len xs)

\func oneStep {A : \Type} (f : A -> A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x nil => cons x nil
    | cons x (cons y xs) => \case (f x y) \with {
        | true => (cons x (oneStep f (cons y xs)))
        | false => (cons y (oneStep f (cons x xs)))
    }

\func sort {A : \Type} (f : A -> A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x xs => helper f (cons x xs) (len xs)
        \where
            \func helper {A : \Type} (f : A -> A -> Bool) (xs : List A) (n : Nat) : List A \elim n
                | 0 => xs
                | suc n => helper f (oneStep f xs) n

-- 2. Определите filter через if, а не через with.
--    Докажите для этой версии filter лемму filter-lem.

\func if {A : \Type} (x : Bool) (t e : A) : A \elim x
    | true => t
    | false => e

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x xs => if (p x) (cons x (filter' p xs)) (filter' p xs)

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) <= length xs \elim xs
    | nil => unit
    | cons x xs => \case p x \as b \return length (if (b) (cons x (filter' p xs)) (filter' p xs)) <= suc (length xs) \with {
        | true => filter-lem p xs
        | false => <=-helper (filter-lem p xs)
    }

-- 3. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\func headOrDefault {A : \Type} (default : A) (xs : List A) : A \elim xs
  | nil => default
  | cons x _ => x

\func tail {A : \Type} (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => xs

\func cons/=nil {A : \Type} {x : A} {xs : List A} (p : cons x xs = nil) : Empty => transport (\lam n => \case n \with { | nil => Empty | cons _ _ => Unit }) p unit

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
    path (\lam i => f (p @ i) (q @ i))

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq => decideEq dec
    \where
        \func decideEq {A : \Type} (dec : Eq A) (xs ys : List A) : Decide (xs = ys) \elim xs, ys
            | nil, nil => yes idp
            | nil, cons y ys => no (\lam p => cons/=nil (sym p))
            | cons x xs, nil => no cons/=nil
            | cons x xs, cons y ys => \case decideEq dec xs ys, dec.decideEq x y \with {
                | yes ps, yes p => yes (pmap2 (\lam z zs => cons z zs) p ps)
                | yes ps, no c => no (\lam p => c (pmap (headOrDefault x) p))
                | no c, _ => no (\lam p => c (pmap tail p))
            }

-- 4. Докажите, что предикат isEven разрешим.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func even/=odd {k k' : Nat} (p : 2 * k = 2 * k' + 1) : Empty \elim k, k'
    | 0 , 0 => suc/=0 (sym p)
    | suc x, 0 => suc/=0 (pmap pred p)
    | 0, suc y => suc/=0 (sym (pmap pred p))
    | suc x, suc y => even/=odd (pmap pred (pmap pred p))

\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

\func isEven-dec : DecPred isEven => \lam n =>
    \case parity n \with {
        | even k p => yes (k, p)
        | odd k p => no (\lam x => even/=odd ((sym x.2) *> p))
    }

-- 5. Докажите, что если равенство элементов A разрешимо, то любой список элементов A либо пуст, либо состоит из повторений одного элемента, либо в A существует два различных элемента.

\func repeat {A : \Type} (n : Nat) (a : A) : List A \elim n
  | 0 => nil
  | suc n => cons a (repeat n a)

\data Result (A : \Type) (xs : List A)
  | empty (xs = nil)
  | repeated (n : Nat) (a : A) (p : xs = repeat n a)
  | A-is-not-trivial (a a' : A) (p : a = a' -> Empty)

\func lemma {A : \Type} (xs : List A) {dec : DecEq A} : Result A xs \elim xs
  | nil => empty idp
  | cons x xs => \case lemma xs {dec} \with {
    | empty p => repeated 1 x (pmap (cons x) p)
    | A-is-not-trivial a a' p => A-is-not-trivial a a' p
    | repeated n a p1 => \case dec x a \with {
      | yes p2 => repeated (suc n) a (pmap2 cons p2 p1)
      | no c => A-is-not-trivial x a c
    }
  }

-- 6. Определите view, представляющий число в виде частного и остатка от деления его на произвольное (неотрицательное) число m.
--    Реализуйте функцию деления.

\data T (b : Bool) \with
  | true => tt

\data ModView (m n : Nat)
  | quot-rem (q r : Nat) (t : T (r < m)) (p : n = q * m + r)

\func mod-view (m n : Nat) (t : T (0 < m)) : ModView m n => {?}

\func div (n m : Nat) (t : T (0 < m)) : Nat => {?}

-- 7. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p => {?}

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : FromBoolToDec (FromDecToBool P) = P => {?}